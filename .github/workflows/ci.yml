name: CI

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'doc/**'
      - 'examples/**'
      - 'assets/**'
  pull_request:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'doc/**'
      - 'examples/**'
      - 'assets/**'
  schedule:
    # Run weekly to catch regressions
    - cron: '0 0 * * 0'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, macos-13]
        build-type: [debug, asan, tsan, release]
        exclude:
          # Skip sanitizer builds on older macOS to reduce CI time
          - os: macos-13
            build-type: asan
          - os: macos-13
            build-type: tsan

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Check system info
      run: |
        echo "macOS version: $(sw_vers -productVersion)"
        echo "Architecture: $(uname -m)"
        echo "Xcode version: $(xcode-select --version)"
        echo "Available architectures: $(lipo -archs /usr/bin/file 2>/dev/null || echo 'Universal')"

    - name: Install dependencies
      run: |
        # Install any additional dependencies if needed
        echo "Installing dependencies..."

    - name: Clean build environment
      run: make clean

    - name: Build yabai (${{ matrix.build-type }})
      run: |
        case "${{ matrix.build-type }}" in
          debug)
            make all
            ;;
          asan)
            make asan
            ;;
          tsan)
            make tsan
            ;;
          release)
            make install
            ;;
        esac

    - name: Verify binary architecture
      run: |
        if [ -f "./bin/yabai" ]; then
          echo "Binary created successfully"
          file ./bin/yabai
          # Check if it's a universal binary (should support both x86_64 and arm64)
          if command -v lipo >/dev/null 2>&1; then
            echo "Architectures in binary:"
            lipo -info ./bin/yabai
          fi
          # Check binary size and basic info
          ls -lh ./bin/yabai
        else
          echo "ERROR: Binary not found!"
          exit 1
        fi

    - name: Test basic functionality
      run: |
        # Test that the binary can at least show version
        ./bin/yabai --version || echo "Version command not available or failed"
        
        # Test help command
        ./bin/yabai --help || echo "Help command not available or failed"

    - name: Run unit tests
      run: |
        # Run the test suite if it exists
        if [ -d "tests" ]; then
          echo "Running test suite..."
          cd tests
          make all || echo "Tests failed or not available"
        else
          echo "No test suite found"
        fi

    - name: Check for memory leaks (debug builds only)
      if: matrix.build-type == 'debug'
      run: |
        # Run basic memory leak detection on debug builds
        echo "Checking for obvious memory issues..."
        # This is a placeholder - actual leak detection would need more setup

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      if: matrix.build-type == 'release' && matrix.os == 'macos-latest'
      with:
        name: yabai-${{ github.sha }}
        path: ./bin/yabai
        retention-days: 30

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.build-type }}
        path: |
          tests/bin/
          *.log
        retention-days: 7

  validate-install-script:
    name: Validate Install Script
    runs-on: macos-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test install script syntax
      run: |
        # Check script syntax
        sh -n scripts/install.sh
        
    - name: Validate script dependencies
      run: |
        # Check that required tools are available
        command -v curl >/dev/null 2>&1 || echo "curl not found"
        command -v shasum >/dev/null 2>&1 || echo "shasum not found"  
        command -v tar >/dev/null 2>&1 || echo "tar not found"
        command -v cp >/dev/null 2>&1 || echo "cp not found"
        command -v cut >/dev/null 2>&1 || echo "cut not found"

  check-codesigning:
    name: Check Code Signing Setup
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check codesigning script
      run: |
        if [ -f "scripts/codesign" ]; then
          echo "Codesigning script found"
          sh -n scripts/codesign || echo "Codesigning script has syntax errors"
        else
          echo "No codesigning script found"
        fi
        
    - name: Check for codesigning in Makefile
      run: |
        if grep -q "codesign" makefile; then
          echo "Codesigning found in Makefile"
          grep "codesign" makefile
        else
          echo "No codesigning found in Makefile"
        fi

  security-check:
    name: Basic Security Check
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for hardcoded paths
      run: |
        echo "Checking for potential hardcoded paths..."
        grep -r "/Users/" src/ || echo "No hardcoded user paths found"
        grep -r "/tmp/" src/ || echo "No hardcoded tmp paths found"
        
    - name: Check for potential security issues
      run: |
        echo "Checking for potential security issues..."
        # Look for unsafe functions
        grep -r "strcpy\|strcat\|sprintf\|gets" src/ || echo "No unsafe string functions found"
        
        # Check for potential buffer overflows
        grep -r "char.*\[.*\]" src/ | head -10 || echo "Buffer analysis complete"