name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.0.0'

permissions:
  contents: write
  actions: read

env:
  # Ensure we build universal binaries
  MACOSX_DEPLOYMENT_TARGET: 11.0

jobs:
  create-release:
    name: Create Release
    runs-on: macos-latest
    
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      tag_name: ${{ steps.get_version.outputs.tag_name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version from tag
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG_NAME="${{ github.event.inputs.tag }}"
        else
          TAG_NAME=${GITHUB_REF#refs/tags/}
        fi
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "version=${TAG_NAME#v}" >> $GITHUB_OUTPUT
    
    - name: Generate release notes
      id: release_notes
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        echo "## What's Changed" > release_notes.md
        echo "" >> release_notes.md
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "Changes since $PREVIOUS_TAG:" >> release_notes.md
          git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..HEAD >> release_notes.md
        else
          echo "Initial release" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Using the install script:" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "curl -sSL https://raw.githubusercontent.com/koekeishiya/yabai/master/scripts/install.sh | sh" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Manual installation:" >> release_notes.md
        echo "1. Download the \`yabai-${{ steps.get_version.outputs.version }}.tar.gz\` archive" >> release_notes.md
        echo "2. Extract and install according to the documentation" >> release_notes.md
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.tag_name }}
        name: Release ${{ steps.get_version.outputs.tag_name }}
        body_path: release_notes.md
        draft: false
        prerelease: false

  build-and-upload:
    name: Build and Upload Assets
    runs-on: macos-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Install dependencies
      run: |
        # Install asciidoctor for documentation
        gem install asciidoctor

    - name: Clean and prepare build
      run: |
        make clean
        echo "Build environment prepared"

    - name: Build release binary
      run: |
        echo "Building optimized release binary..."
        make install
        
        echo "Verifying binary was created..."
        if [ ! -f "./bin/yabai" ]; then
          echo "ERROR: Binary not created!"
          exit 1
        fi
        
        echo "Binary info:"
        file ./bin/yabai
        ls -lh ./bin/yabai
        
        # Verify it's a universal binary
        if command -v lipo >/dev/null 2>&1; then
          lipo -info ./bin/yabai
        fi

    - name: Generate documentation
      run: |
        echo "Generating man page..."
        make man
        
        if [ -f "./doc/yabai.1" ]; then
          echo "Man page generated successfully"
          ls -lh ./doc/yabai.1
        else
          echo "WARNING: Man page not generated"
        fi

    - name: Set up codesigning (if certificates available)
      env:
        CODESIGN_CERTIFICATE: ${{ secrets.CODESIGN_CERTIFICATE }}
        CODESIGN_PASSWORD: ${{ secrets.CODESIGN_PASSWORD }}
      run: |
        if [ -n "$CODESIGN_CERTIFICATE" ]; then
          echo "Setting up codesigning..."
          
          # Decode and import certificate
          echo "$CODESIGN_CERTIFICATE" | base64 --decode > certificate.p12
          
          # Create temporary keychain
          security create-keychain -p actions build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p actions build.keychain
          
          # Import certificate
          security import certificate.p12 -k build.keychain -P "$CODESIGN_PASSWORD" -T /usr/bin/codesign
          
          # Set key partition list
          security set-key-partition-list -S apple-tool:,apple: -s -k actions build.keychain
          
          # Sign the binary
          codesign -fs "yabai-cert" ./bin/yabai || echo "Codesigning failed, using unsigned binary"
          
          # Verify signature
          codesign -vv ./bin/yabai || echo "Signature verification failed"
          
          # Cleanup
          rm certificate.p12
          
          echo "Codesigning setup complete"
        else
          echo "No codesigning certificate provided, skipping signing"
        fi

    - name: Add icon to binary
      run: |
        if [ -f "scripts/seticon.py" ]; then
          echo "Adding icon to binary..."
          make icon || echo "Icon addition failed"
        else
          echo "No icon script found"
        fi

    - name: Create archive
      run: |
        echo "Creating release archive..."
        make archive || echo "Archive creation via makefile failed, creating manual archive"
        
        # If makefile archive failed, create one manually
        if [ ! -f "./bin/yabai-${{ needs.create-release.outputs.tag_name }}.tar.gz" ]; then
          echo "Creating manual archive..."
          
          mkdir -p release_archive/bin
          mkdir -p release_archive/doc
          mkdir -p release_archive/examples
          
          cp -r bin/* release_archive/bin/ 2>/dev/null || true
          cp -r doc/* release_archive/doc/ 2>/dev/null || true
          cp -r examples/* release_archive/examples/ 2>/dev/null || true
          cp README.md release_archive/ 2>/dev/null || true
          cp LICENSE.txt release_archive/ 2>/dev/null || true
          cp CHANGELOG.md release_archive/ 2>/dev/null || true
          
          tar -czf ./bin/yabai-${{ needs.create-release.outputs.tag_name }}.tar.gz -C release_archive .
        fi
        
        # Verify archive was created
        if [ -f "./bin/yabai-${{ needs.create-release.outputs.tag_name }}.tar.gz" ]; then
          echo "Archive created successfully:"
          ls -lh ./bin/yabai-${{ needs.create-release.outputs.tag_name }}.tar.gz
          
          # Generate checksum
          shasum -a 256 ./bin/yabai-${{ needs.create-release.outputs.tag_name }}.tar.gz > ./bin/yabai-${{ needs.create-release.outputs.tag_name }}.tar.gz.sha256
          
          echo "Archive contents:"
          tar -tzf ./bin/yabai-${{ needs.create-release.outputs.tag_name }}.tar.gz | head -20
        else
          echo "ERROR: Archive creation failed!"
          exit 1
        fi

    - name: Update install script
      run: |
        if [ -f "scripts/install.sh" ]; then
          echo "Updating install script with new version and hash..."
          
          VERSION="${{ needs.create-release.outputs.tag_name }}"
          HASH=$(shasum -a 256 ./bin/yabai-${VERSION}.tar.gz | cut -d " " -f 1)
          
          # Update version and hash in install script
          sed -i '' "s/^VERSION=.*/VERSION=\"${VERSION#v}\"/" scripts/install.sh
          sed -i '' "s/^EXPECTED_HASH=.*/EXPECTED_HASH=\"$HASH\"/" scripts/install.sh
          
          echo "Install script updated"
          echo "New version: $(grep '^VERSION=' scripts/install.sh)"
          echo "New hash: $(grep '^EXPECTED_HASH=' scripts/install.sh)"
        else
          echo "No install script found to update"
        fi

    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.create-release.outputs.tag_name }}
        files: |
          ./bin/yabai
          ./bin/yabai-${{ needs.create-release.outputs.tag_name }}.tar.gz
          ./bin/yabai-${{ needs.create-release.outputs.tag_name }}.tar.gz.sha256
          ./doc/yabai.1

  update-install-script:
    name: Update Install Script
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update install script in repository
      run: |
        # This step would update the install script in the repository
        # with the new version and hash information
        echo "Install script update would happen here"
        echo "This requires careful consideration of the update process"

  notify-completion:
    name: Notify Release Completion
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload]
    if: always()
    
    steps:
    - name: Release Status
      run: |
        if [ "${{ needs.build-and-upload.result }}" = "success" ]; then
          echo "‚úÖ Release ${{ needs.create-release.outputs.tag_name }} created successfully!"
          echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.tag_name }}"
        else
          echo "‚ùå Release creation failed"
          exit 1
        fi